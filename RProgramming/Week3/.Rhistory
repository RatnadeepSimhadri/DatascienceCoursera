Oklahoma["Oklahoma$Grade7":"Oklahoma$Grade12"]
Oklahoma[,"Oklahoma$Grade7":"Oklahoma$Grade12"]
Oklahoma[,c("Oklahoma$Grade7":"Oklahoma$Grade12")]
Oklahoma[,c(1:2)]
Oklahoma[,c("Oklahoma$Grade7","Oklahoma$Grade12")]
Oklahoma[,c(Oklahoma$Grade7,Oklahoma$Grade12)]
Oklahoma[,c(Oklahoma$Grade7: Oklahoma$Grade12)]
Oklahoma[,c("Grade7","Grade12")]
Oklahoma[,c("Grade7":"Grade12")]
Oklahoma[,c("Grade7","Grade8","Grade9","Grade10","Grade11","Grade12")]
Oklahoma[,c("Grade7","Grade8","Grade9","Grade10","Grade11","Grade12")]
? apply
apply(Oklahoma[,c("Grade7","Grade8","Grade9","Grade10","Grade11","Grade12")],2,mean)
apply(Oklahoma[,c("Grade7","Grade8","Grade9","Grade10","Grade11","Grade12")],2,mean,na.rm=TRUE)
Oklahoma
Oklahoma
Oklahoma[1:10,]
apply(Oklahoma[,c("Grade7","Grade8","Grade9","Grade10","Grade11","Grade12")],1,mean)
apply(Oklahoma[,c("Grade7","Grade8","Grade9","Grade10","Grade11","Grade12")],1,mean)
apply(Oklahoma[,c("Grade7","Grade8","Grade9","Grade10","Grade11","Grade12")],1,mean,na.rm=TRUE)
apply(Oklahoma[1:10,c("Grade7","Grade8","Grade9","Grade10","Grade11","Grade12")],1,mean,na.rm=TRUE)
Oklahoma[1:10,c("Grade7","Grade8","Grade9","Grade10","Grade11","Grade12")]
Oklahoma$AvgClassSize <- apply(Oklahoma[,c("Grade7","Grade8","Grade9","Grade10","Grade11","Grade12")],1,mean,na.rm=TRUE)
Oklahoma[1:10,c("Grade7","Grade8","Grade9","Grade10","Grade11","Grade12")]
Oklahoma[1:10,]
Oklahoma$AvgClassSize <- apply(Oklahoma[,c("Grade7","Grade8","Grade9","Grade10","Grade11","Grade12")],1,mean,na.rm=TRUE)
Oklahoma[1:25,]
R
q()
# Name: Ratna_Simhadri_HW04_Script
# Path: C:\Academy\Tamu\STAT_604_STAT_COMP_ANA\Assignment4
# Created By: Ratna Deep
# Created Date: 9/14/2015
# Purpose: This script file has code related to the Assignment4 HW
# Last Executed: 9/16/2015
Sys.time()
# 1 Housekeeping
objects()
rm()
# 2 Send output to a different file as well as console
sink(file="C:\Academy\Tamu\STAT_604_STAT_COMP_ANA\Assignment4\Ratna_Simhadri_HW04_Console.txt",split=TRUE)
# 3 create and display a vector of numeric values from 3 to 120 with an increment of 3
(vectorOne <- seq( from=3 , to=120, by=3))
# Show the type of data contained in the vector
mode(vectorOne)
# 4 Create and display a vector of numeric values from 0.5 to 40 with an increment of 0.5
(vectorTwo <- seq( from=0.5, to=40, by=0.5))
# Show data contained in the Vector
mode(vectorTwo)
# 5 Use the second vector to create and display a matrix by columns that is 8 columns wide
(matrixOne <- matrix(data=vectorTwo , nrow = (length(vectorTwo)/8) , ncol=8))
# 6 Combine the two vectors as rows to create and display a new matrix.
(matrixTwo <- rbind(vectorOne,vectorTwo))
# 7 Combine the two vectors as columns to create and display a new matrix
(matrixThree <- cbind(vectorOne,vectorTwo))  # First Vector is smaller than second hence the values in col 1 are recycled
# 8(a) Show the contents of the workspace
ls()
# 8(b) Load the HW04 workspace that you downloaded from eCampus
load("C:/Academy/Tamu/STAT_604_STAT_COMP_ANA/Assignment4/HW04.RData")
# 8(c) Show the contents of the workspace after including newly loaded workspace
ls()
# 9 Display the structure of the object loaded from the HW04 workspace.
str(Oklahoma)
# 10 Display a summary of the object loaded from the HW04 workspace.
summary(Oklahoma)
# 11 Compute the average of the HSTotal column
mean(Oklahoma$HSTotal, na.rm=TRUE)
# 12 Perform a logical test to show which HSTotal values are not missing and are smaller than average
!is.na(Oklahoma$HSTotal)& (Oklahoma$HSTotal < mean(Oklahoma$HSTotal, na.rm=TRUE))
# 13 Display school, city and HSTotal of records that meet criteria in previous step. 
Oklahoma[!is.na(Oklahoma$HSTotal)& (Oklahoma$HSTotal < mean(Oklahoma$HSTotal, na.rm=TRUE)),c(1,2,15)] 
# The above comand uses column numbers for column reference. Another way of writing the command would be to use col names as below
# Oklahoma[!is.na(Oklahoma$HSTotal)& (Oklahoma$HSTotal < mean(Oklahoma$HSTotal, na.rm=TRUE)),c("School","LocCity","HSTotal")] 
# 14 Use the apply function to compute the average class size for grades 7 through 12
apply(Oklahoma[,c("Grade7","Grade8","Grade9","Grade10","Grade11","Grade12")],2,mean,na.rm=TRUE)
# 15 Use the apply function to create a new column called AvgClassSize by computing the average class size of grades 7 through 12 for each school.
Oklahoma$AvgClassSize <- apply(Oklahoma[,c("Grade7","Grade8","Grade9","Grade10","Grade11","Grade12")],1,mean,na.rm=TRUE)
# 16 Display the first 25 rows of the modified data frame.
Oklahoma[1:25,]
# 17  close output file
sink()
q()
# Name: Ratna_Simhadri_HW04_Script
# Path: C:\Academy\Tamu\STAT_604_STAT_COMP_ANA\Assignment4
# Created By: Ratna Deep
# Created Date: 9/14/2015
# Purpose: This script file has code related to the Assignment4 HW
# Last Executed: 9/16/2015
Sys.time()
# 1 Housekeeping
objects()
rm()
# 2 Send output to a different file as well as console
sink(file="C:/Academy/Tamu/STAT_604_STAT_COMP_ANA/Assignment4/Ratna_Simhadri_HW04_Console.txt",split=TRUE)
# 3 create and display a vector of numeric values from 3 to 120 with an increment of 3
(vectorOne <- seq( from=3 , to=120, by=3))
# Show the type of data contained in the vector
mode(vectorOne)
# 4 Create and display a vector of numeric values from 0.5 to 40 with an increment of 0.5
(vectorTwo <- seq( from=0.5, to=40, by=0.5))
# Show data contained in the Vector
mode(vectorTwo)
# 5 Use the second vector to create and display a matrix by columns that is 8 columns wide
(matrixOne <- matrix(data=vectorTwo , nrow = (length(vectorTwo)/8) , ncol=8))
# 6 Combine the two vectors as rows to create and display a new matrix.
(matrixTwo <- rbind(vectorOne,vectorTwo))
# 7 Combine the two vectors as columns to create and display a new matrix
(matrixThree <- cbind(vectorOne,vectorTwo))  # First Vector is smaller than second hence the values in col 1 are recycled
# 8(a) Show the contents of the workspace
ls()
# 8(b) Load the HW04 workspace that you downloaded from eCampus
load("C:/Academy/Tamu/STAT_604_STAT_COMP_ANA/Assignment4/HW04.RData")
# 8(c) Show the contents of the workspace after including newly loaded workspace
ls()
# 9 Display the structure of the object loaded from the HW04 workspace.
str(Oklahoma)
# 10 Display a summary of the object loaded from the HW04 workspace.
summary(Oklahoma)
# 11 Compute the average of the HSTotal column
mean(Oklahoma$HSTotal, na.rm=TRUE)
# 12 Perform a logical test to show which HSTotal values are not missing and are smaller than average
!is.na(Oklahoma$HSTotal)& (Oklahoma$HSTotal < mean(Oklahoma$HSTotal, na.rm=TRUE))
# 13 Display school, city and HSTotal of records that meet criteria in previous step. 
Oklahoma[!is.na(Oklahoma$HSTotal)& (Oklahoma$HSTotal < mean(Oklahoma$HSTotal, na.rm=TRUE)),c(1,2,15)] 
# The above comand uses column numbers for column reference. Another way of writing the command would be to use col names as below
# Oklahoma[!is.na(Oklahoma$HSTotal)& (Oklahoma$HSTotal < mean(Oklahoma$HSTotal, na.rm=TRUE)),c("School","LocCity","HSTotal")] 
# 14 Use the apply function to compute the average class size for grades 7 through 12
apply(Oklahoma[,c("Grade7","Grade8","Grade9","Grade10","Grade11","Grade12")],2,mean,na.rm=TRUE)
# 15 Use the apply function to create a new column called AvgClassSize by computing the average class size of grades 7 through 12 for each school.
Oklahoma$AvgClassSize <- apply(Oklahoma[,c("Grade7","Grade8","Grade9","Grade10","Grade11","Grade12")],1,mean,na.rm=TRUE)
# 16 Display the first 25 rows of the modified data frame.
Oklahoma[1:25,]
# 17  close output file
sink()
q()
# Name: Ratna_Simhadri_HW04_Script
# Path: C:\Academy\Tamu\STAT_604_STAT_COMP_ANA\Assignment4
# Created By: Ratna Deep
# Created Date: 9/14/2015
# Purpose: This script file has code related to the Assignment4 HW
# Last Executed: 9/16/2015
Sys.time()
# 1 Housekeeping
objects()
rm()
# 2 Send output to a different file as well as console
sink(file="C:/Academy/Tamu/STAT_604_STAT_COMP_ANA/Assignment4/Ratna_Simhadri_HW04_Output.txt",split=TRUE)
# 3 create and display a vector of numeric values from 3 to 120 with an increment of 3
(vectorOne <- seq( from=3 , to=120, by=3))
# Show the type of data contained in the vector
mode(vectorOne)
# 4 Create and display a vector of numeric values from 0.5 to 40 with an increment of 0.5
(vectorTwo <- seq( from=0.5, to=40, by=0.5))
# Show data contained in the Vector
mode(vectorTwo)
# 5 Use the second vector to create and display a matrix by columns that is 8 columns wide
(matrixOne <- matrix(data=vectorTwo , nrow = (length(vectorTwo)/8) , ncol=8))
# 6 Combine the two vectors as rows to create and display a new matrix.
(matrixTwo <- rbind(vectorOne,vectorTwo))
# 7 Combine the two vectors as columns to create and display a new matrix
(matrixThree <- cbind(vectorOne,vectorTwo))  # First Vector is smaller than second hence the values in col 1 are recycled
# 8(a) Show the contents of the workspace
ls()
# 8(b) Load the HW04 workspace that you downloaded from eCampus
load("C:/Academy/Tamu/STAT_604_STAT_COMP_ANA/Assignment4/HW04.RData")
# 8(c) Show the contents of the workspace after including newly loaded workspace
ls()
# 9 Display the structure of the object loaded from the HW04 workspace.
str(Oklahoma)
# 10 Display a summary of the object loaded from the HW04 workspace.
summary(Oklahoma)
# 11 Compute the average of the HSTotal column
mean(Oklahoma$HSTotal, na.rm=TRUE)
# 12 Perform a logical test to show which HSTotal values are not missing and are smaller than average
!is.na(Oklahoma$HSTotal)& (Oklahoma$HSTotal < mean(Oklahoma$HSTotal, na.rm=TRUE))
# 13 Display school, city and HSTotal of records that meet criteria in previous step. 
Oklahoma[!is.na(Oklahoma$HSTotal)& (Oklahoma$HSTotal < mean(Oklahoma$HSTotal, na.rm=TRUE)),c(1,2,15)] 
# The above comand uses column numbers for column reference. Another way of writing the command would be to use col names as below
# Oklahoma[!is.na(Oklahoma$HSTotal)& (Oklahoma$HSTotal < mean(Oklahoma$HSTotal, na.rm=TRUE)),c("School","LocCity","HSTotal")] 
# 14 Use the apply function to compute the average class size for grades 7 through 12
apply(Oklahoma[,c("Grade7","Grade8","Grade9","Grade10","Grade11","Grade12")],2,mean,na.rm=TRUE)
# 15 Use the apply function to create a new column called AvgClassSize by computing the average class size of grades 7 through 12 for each school.
Oklahoma$AvgClassSize <- apply(Oklahoma[,c("Grade7","Grade8","Grade9","Grade10","Grade11","Grade12")],1,mean,na.rm=TRUE)
# 16 Display the first 25 rows of the modified data frame.
Oklahoma[1:25,]
# 17  close output file
sink()
q()
# Name: Ratna_Simhadri_HW04_Script
# Path: C:\Academy\Tamu\STAT_604_STAT_COMP_ANA\Assignment4
# Created By: Ratna Deep
# Created Date: 9/14/2015
# Purpose: This script file has code related to the Assignment4 HW
# Last Executed: 9/16/2015
Sys.time()
# 1 Housekeeping
objects()
rm()
# 2 Send output to a different file as well as console
sink(file="C:/Academy/Tamu/STAT_604_STAT_COMP_ANA/Assignment4/Ratna_Simhadri_HW04_Output.txt",split=TRUE)
# 3 create and display a vector of numeric values from 3 to 120 with an increment of 3
(vectorOne <- seq( from=3 , to=120, by=3))
# Show the type of data contained in the vector
mode(vectorOne)
# 4 Create and display a vector of numeric values from 0.5 to 40 with an increment of 0.5
(vectorTwo <- seq( from=0.5, to=40, by=0.5))
# Show data contained in the Vector
mode(vectorTwo)
# 5 Use the second vector to create and display a matrix by columns that is 8 columns wide
(matrixOne <- matrix(data=vectorTwo , nrow = (length(vectorTwo)/8) , ncol=8))
# 6 Combine the two vectors as rows to create and display a new matrix.
(matrixTwo <- rbind(vectorOne,vectorTwo))
# 7 Combine the two vectors as columns to create and display a new matrix
(matrixThree <- cbind(vectorOne,vectorTwo))  # First Vector is smaller than second hence the values in col 1 are recycled
# 8(a) Show the contents of the workspace
ls()
# 8(b) Load the HW04 workspace that you downloaded from eCampus
load("C:/Academy/Tamu/STAT_604_STAT_COMP_ANA/Assignment4/HW04.RData")
# 8(c) Show the contents of the workspace after including newly loaded workspace
ls()
# 9 Display the structure of the object loaded from the HW04 workspace.
str(Oklahoma)
# 10 Display a summary of the object loaded from the HW04 workspace.
summary(Oklahoma)
# 11 Compute the average of the HSTotal column
mean(Oklahoma$HSTotal, na.rm=TRUE)
# 12 Perform a logical test to show which HSTotal values are not missing and are smaller than average
!is.na(Oklahoma$HSTotal)& (Oklahoma$HSTotal < mean(Oklahoma$HSTotal, na.rm=TRUE))
# 13 Display school, city and HSTotal of records that meet criteria in previous step. 
Oklahoma[!is.na(Oklahoma$HSTotal)& (Oklahoma$HSTotal < mean(Oklahoma$HSTotal, na.rm=TRUE)),c(1,2,15)] 
# The above comand uses column numbers for column reference. Another way of writing the command would be to use col names as below
# Oklahoma[!is.na(Oklahoma$HSTotal)& (Oklahoma$HSTotal < mean(Oklahoma$HSTotal, na.rm=TRUE)),c("School","LocCity","HSTotal")] 
# 14 Use the apply function to compute the average class size for grades 7 through 12
apply(Oklahoma[,c("Grade7","Grade8","Grade9","Grade10","Grade11","Grade12")],2,mean,na.rm=TRUE)
# 15 Use the apply function to create a new column called AvgClassSize by computing the average class size of grades 7 through 12 for each school.
Oklahoma$AvgClassSize <- apply(Oklahoma[,c("Grade7","Grade8","Grade9","Grade10","Grade11","Grade12")],1,mean,na.rm=TRUE)
# 16 Display the first 25 rows of the modified data frame.
Oklahoma[1:25,]
# 17  close output file
sink()
q()
# Name: Ratna_Simhadri_HW04_Script
# Path: C:\Academy\Tamu\STAT_604_STAT_COMP_ANA\Assignment4
# Created By: Ratna Deep
# Created Date: 9/14/2015
# Purpose: This script file has code related to the Assignment4 HW
# Last Executed: 9/16/2015
Sys.time()
# 1 Housekeeping
objects()
rm()
# 2 Send output to a different file as well as console
sink(file="C:/Academy/Tamu/STAT_604_STAT_COMP_ANA/Assignment4/Ratna_Simhadri_HW04_Output.txt",split=TRUE)
# 3 create and display a vector of numeric values from 3 to 120 with an increment of 3
(vectorOne <- seq( from=3 , to=120, by=3))
# Show the type of data contained in the vector
mode(vectorOne)
# 4 Create and display a vector of numeric values from 0.5 to 40 with an increment of 0.5
(vectorTwo <- seq( from=0.5, to=40, by=0.5))
# Show data contained in the Vector
mode(vectorTwo)
# 5 Use the second vector to create and display a matrix by columns that is 8 columns wide
(matrixOne <- matrix(data=vectorTwo , nrow = (length(vectorTwo)/8) , ncol=8))
# 6 Combine the two vectors as rows to create and display a new matrix.
(matrixTwo <- rbind(vectorOne,vectorTwo))
# 7 Combine the two vectors as columns to create and display a new matrix
(matrixThree <- cbind(vectorOne,vectorTwo))  # First Vector is smaller than second hence the values in col 1 are recycled
# 8(a) Show the contents of the workspace
ls()
# 8(b) Load the HW04 workspace that you downloaded from eCampus
load("C:/Academy/Tamu/STAT_604_STAT_COMP_ANA/Assignment4/HW04.RData")
# 8(c) Show the contents of the workspace after including newly loaded workspace
ls()
# 9 Display the structure of the object loaded from the HW04 workspace.
str(Oklahoma)
# 10 Display a summary of the object loaded from the HW04 workspace.
summary(Oklahoma)
# 11 Compute the average of the HSTotal column
mean(Oklahoma$HSTotal, na.rm=TRUE)
# 12 Perform a logical test to show which HSTotal values are not missing and are smaller than average
!is.na(Oklahoma$HSTotal)& (Oklahoma$HSTotal < mean(Oklahoma$HSTotal, na.rm=TRUE))
# 13 Display school, city and HSTotal of records that meet criteria in previous step. 
Oklahoma[!is.na(Oklahoma$HSTotal)& (Oklahoma$HSTotal < mean(Oklahoma$HSTotal, na.rm=TRUE)),c(1,2,15)] 
# The above comand uses column numbers for column reference. Another way of writing the command would be to use col names as below
# Oklahoma[!is.na(Oklahoma$HSTotal)& (Oklahoma$HSTotal < mean(Oklahoma$HSTotal, na.rm=TRUE)),c("School","LocCity","HSTotal")] 
# 14 Use the apply function to compute the average class size for grades 7 through 12
apply(Oklahoma[,c("Grade7","Grade8","Grade9","Grade10","Grade11","Grade12")],2,mean,na.rm=TRUE)
# 15 Use the apply function to create a new column called AvgClassSize by computing the average class size of grades 7 through 12 for each school.
Oklahoma$AvgClassSize <- apply(Oklahoma[,c("Grade7","Grade8","Grade9","Grade10","Grade11","Grade12")],1,mean,na.rm=TRUE)
# 16 Display the first 25 rows of the modified data frame.
Oklahoma[1:25,]
# 17  close output file
sink()
q()
squarefun <- function(a,b){
a^2
}
squarefun(2)
squarefun <- function(a,b){
b=1
a^2
}
squarefun(2)
squarefun <- function(a,b){
b*a^2
}
squarefun(2)
squarefun(2,1)
search()
lm
search()
lm <- function( ){
print("User defined function")
}
lm
lms()
lm()
ls()
getwd()
vectorOne
vectorTwo
cat(vectorOne,vectorTwo)
paste(vectorOne,vectorTwo)
y <- 10
f <- function(x) {
 y <- 2
 y^2 + g(x)
}
g <- function(x) {
 x*y
}
Sys.time()
time.x <- Sys.time()
p <- as.POSIXlt(time.x)
p
unclass(p)
time.p
time.x
p
unclass(p)
p$mon
p <- as.POSIXlt(time.x)
?POSIXlt
POSIXct(time.x)
POSIXlt(Sys.time())
time.x <- Sys.time()
time.x
plt <- POSIXlt(time.x)
plt <- as.POSIXlt(time.x)
pct <- as.POSIXct(time.x)
plt
pct
unclass(plt)
unclass(plt)
unclass(pct)
x <- 1:10
if(x > 5) {
        x <- 0
}
f <- function(x) {
        g <- function(y) {
                y + z
        }
        z <- 4
        x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
        NA
} else {
        10
}
y
q()
# Script Name:  Ratna_Simhadri_HW05_Script.R
# Location: C:\Academy\Tamu\STAT_604_STAT_COMP_ANA\Assignment5
# Created by: Ratna Deep Simhadri
# Creation Date:  09/22/15
# Purpose: Homework_05 Assignment
# Last executed:  09/23/15 
Sys.time()
#1 House Keeping
objects()
rm(list=ls())
#2 Include a line of code to load the HW04 workspace
load("C:\\Academy\\Tamu\\STAT_604_STAT_COMP_ANA\\Assignment4\\HW04.RDATA")
# Show the contents of the workspace
ls()
#3 Create a new data frame of schools containing HS in the name
OklahomaNew <- Oklahoma[grepl(" HS",Oklahoma$School),c(-6,-7,- 12:-14)]
# show the structure of the new data frame 
str(OklahomaNew)
#4 Read in zip code database into a data frame for future use
zipcodeDB <- read.csv("C:/Academy/Tamu/STAT_604_STAT_COMP_ANA/Assignment5/zip_codes.csv")
# show the structure of the new data frame
str(zipcodeDB)
#5a Create a data frame of Oklahoma zips. Remove PO BOX and Decommisioned zips
OklahomaZips<-zipcodeDB[(zipcodeDB$state == "OK")& !((zipcodeDB$type=="PO BOX")|(as.logical(zipcodeDB$decommissioned))),names(zipcodeDB) %in% c("zip","primary_city","county","estimated_population")]
#5b Change the name of primary_city to MailCity
names(OklahomaZips)<- sub("primary_city","MailCity",names(OklahomaZips)) 
#5c Change the names of the cities to upper case
OklahomaZips$MailCity <- toupper(OklahomaZips$MailCity)
#5d create a zip3 column using the first 3 digits of the zip code
OklahomaZips$ZipRegion<- substr(OklahomaZips$zip,1,3)
#5e Display information on new data frame
str(OklahomaZips)
OklahomaZips[1:20,]
#6 Merge the zip data with the Oklahoma High School data
OklahomaSchools <- merge(OklahomaNew,OklahomaZips)
dim(OklahomaSchools)
#7 Create a data frame of unduplicated High Schools
unduplicatedDataFrame <- OklahomaSchools[!duplicated(OklahomaSchools$School),]
str(unduplicatedDataFrame)
#8 Display the 25 smallest and largest schools based on number of Teachers
unduplicatedDataFrame[order(unduplicatedDataFrame$Teachers),c("ZipRegion","School","MailCity","County","HSTotal","Teachers")][1:25,]
unduplicatedDataFrame[order(unduplicatedDataFrame$Teachers,decreasing=TRUE),c("ZipRegion","School","MailCity","County","HSTotal","Teachers")][1:25,]
#9 create csv file of schools including zipRegion and system time
cat(paste(paste(unduplicatedDataFrame$School,unduplicatedDataFrame$MailCity,
unduplicatedDataFrame$County,unduplicatedDataFrame$ZipRegion,unduplicatedDataFrame$HSTotal,sep=","),Sys.time(), sep=","),sep="\n", 
file="C:/Academy/Tamu/STAT_604_STAT_COMP_ANA/Assignment5/Ratna_Simhadri_HW05.csv")
q()
q()
x 
ls()
x <- 1:4
lapply(x,mean)
y <- list ( a<- 1:5 , b<- 6:10 )
y
lapply(y,mean)
sapply(y,mean)
load("C:\\Academy\\Data Science\\RProgramming\\Week1\\.RData")
ls()
getwd()
setwd("C:/Academy/Data Science/RProgramming/Week3")
ls()
gwtwd()
getwd()
library(datasets)
data(iris)
?iris
ls()
iris
split(iris, iris$Species)
split(iris, iris$Species)
colSum(split(iris, iris$Species))$virginica)
colSum(split(iris, iris$Species))$virginica
colSums(split(iris, iris$Species))$virginica
split(iris, iris$Species)$virginica
colSums(split(iris, iris$Species)$virginica)
str(split(iris, iris$Species)$virginica)
colSums(split(iris, iris$Species)$virginica[,-5])
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
apply(iris, 2, mean)
library(datasets)
data(mtcars)
?mtcars
mtcars
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
mtcars
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
str(tapply(mtcars$mpg, mtcars$cyl, mean))
class(tapply(mtcars$mpg, mtcars$cyl, mean))
tapply(mtcars$mpg, mtcars$cyl, mean)[1,1]
summary(tapply(mtcars$mpg, mtcars$cyl, mean))
tapply(mtcars$mpg, mtcars$cyl, mean)[1,1]
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)[1,]
tapply(mtcars$mpg, mtcars$cyl, mean)[1,0]
tapply(mtcars$mpg, mtcars$cyl, mean)[0,0]
tapply(mtcars$mpg, mtcars$cyl, mean)$8
str(tapply(mtcars$mpg, mtcars$cyl, mean))
str(tapply(mtcars$mpg, mtcars$cyl, mean))
tapply(mtcars$mpg, mtcars$cyl, mean)[1]
tapply(mtcars$mpg, mtcars$cyl, mean)[2]
tapply(mtcars$mpg, mtcars$cyl, mean)[3]- tapply(mtcars$mpg, mtcars$cyl, mean)[1]
colSums(split(iris, iris$Species)$virginica[,-5])
colMean(split(iris, iris$Species)$virginica[,-5])
colMeans(split(iris, iris$Species)$virginica[,-5])
apply(iris[, 1:4], 2, mean)
rowMeans(iris[, 1:4])
colMeans(iris)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
names(mtcars)
sapply(split(mtcars$hp, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)[3]
sapply(split(mtcars$hp, mtcars$cyl), mean)[3]- sapply(split(mtcars$hp, mtcars$cyl), mean)[1]
z 
z = numeric()
z
makeVector <- function(x = numeric()) {
        m <- NULL
        set <- function(y) {
                x <<- y
                m <<- NULL
        }
        get <- function() x
        setmean <- function(mean) m <<- mean
        getmean <- function() m
        list(set = set, get = get,
             setmean = setmean,
             getmean = getmean)
}
x
makevector
makeVector
str(makeVector)
q()
